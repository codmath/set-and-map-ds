  void helper(vector<int>&candidates, int target, vector<vector<int>>&ans, int index, vector<int>&temp){
        //base condition
        
            if(target==0){
                ans.push_back(temp);
                return;
            }
        
        //check duplictae combintion
        for(int i=index; i<candidates.size(); i++){
            if(i>index&&candidates[i]==candidates[i-1]) continue;
            if(candidates[i]>target) break;
        //peak elements
        temp.push_back(candidates[i]);
        helper(candidates, target-candidates[i], ans, i+1, temp);
        //not peak
        temp.pop_back();
        //helper(candidates, target-candidates[index], ans, index+1, temp);
    }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        helper(candidates, target, ans, 0, temp);
        return ans;
        
    }
};
